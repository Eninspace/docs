site_name: Fetch.ai Developer Documentation
site_url: https://docs.fetch.ai/
site_description: Everything you need to know about Fetch.ai. 
google_analytics: ['UA-150926604-1', 'mkdocs.org']
#repo_url: https://github.com/fetchai/docs // commented out to remove edit option
#repo_name: 'GitHub'
site_author: developer@fetch.ai

google_analytics: ['UA-118969813-3', 'auto']


theme:
  name: null
  logo:
    icon: 'assets/images/logo.png'
  custom_dir: theme/custom_theme
  favicon: '/assets/images/favicon.ico'
  feature:
    tabs: true  


nav:
  - Home : "index.md"


  - Agent Framework:
    - Introduction: 'aea/index.md'
    - Version: 'aea/version.md'

    - Concepts:
      - Language Agnostic Definition: 'aea/language-agnostic-definition.md'
      - Agent-oriented development: 'aea/agent-oriented-development.md'
      - Vision: 'aea/vision.md'
      - Application areas: 'aea/app-areas.md'
      - Relation to OEF and Ledger: 'aea/oef-ledger.md'
      - Identity: 'aea/identity.md'
      # - Trust issues: 'aea/trust.md'

    - Demos:
      - Demos: 'aea/demos.md'
      - Aries Cloud Agents Demo: 'aea/aries-cloud-agent-demo.md'
      - Car park skills: 'aea/car-park-skills.md'
      # - Generic skills: 'aea/generic-skills.md'
      - Gym example: 'aea/gym-example.md'
      - Gym skill: 'aea/gym-skill.md'
      - ML skills: 'aea/ml-skills.md'
      - TAC skills: 'aea/tac-skills.md'
      - TAC skills ledger-based: 'aea/tac-skills-contract.md'
      - TAC external app: 'aea/tac.md'
      - Thermometer skills: 'aea/thermometer-skills.md'
      - Weather skills: 'aea/weather-skills.md'

    - Development:
      - Getting started:
        - AEA quick start: 'aea/quickstart.md'
        - Core components - Part 1: 'aea/core-components-1.md'
        - AEA and web frameworks: 'aea/aea-vs-mvc.md'
        - Build a skill for an AEA: 'aea/skill-guide.md'
        - Core components - Part 2: 'aea/core-components-2.md'
        - Trade between two AEAs: 'aea/generic-skills-step-by-step.md'
      - Topic guides:
        - Ways to build an AEA: 'aea/step-one.md'
        - Build an AEA with the CLI: 'aea/build-aea-step-by-step.md'
        - Scaffolding packages: 'aea/scaffolding.md'
        - Generating protocols: 'aea/protocol-generator.md'
        - Logging: 'aea/logging.md'
        - Use multiplexer stand-alone: 'aea/multiplexer-standalone.md'
        - Create stand-alone transaction: 'aea/standalone-transaction.md'
        - Create decision-maker transaction: 'aea/decision-maker-transaction.md'
        - Testing Skills: 'aea/skill-testing.md'
        - Deployment: 'aea/deployment.md'
        - Known limitations: 'aea/known-limits.md'
        - Build an AEA programmatically: 'aea/build-aea-programmatically.md'
        - CLI vs programmatic AEAs: 'aea/cli-vs-programmatic-aeas.md'
        - AEAs vs agents: 'aea/agent-vs-aea.md'
        - Upgrading versions: 'aea/upgrading.md'
        - Modes of running an AEA: 'aea/modes.md'
        - Multi agent manager: 'aea/multi-agent-manager.md'
        - Debugging: 'aea/debug.md'
      - Use case components:
        - Generic skills: 'aea/generic-skills.md'
        - Front-end intergration: 'aea/connect-a-frontend.md'
        - HTTP Connection: 'aea/http-connection-and-skill.md'
        - ORM integration: 'aea/orm-integration.md'
        - Contract deploy and interact: 'aea/erc1155-skills.md'
        - P2P Connection: 'aea/p2p-connection.md'
        - Build an AEA on a Raspberry Pi: 'aea/raspberry-set-up.md'
      - Architecture & component deep-dives:
        - Design principles: 'aea/design-principles.md'
        - Architectural diagram: 'aea/diagram.md'
        - Connections: 'aea/connection.md'
        - Protocols: 'aea/protocol.md'
        - Skills: 'aea/skill.md'
        - Contracts: 'aea/contract.md'
        - Decision Maker: 'aea/decision-maker.md'
        - Ledger & Crypto APIs: 'aea/ledger-integration.md'
        - Message routing: 'aea/message-routing.md'
        - Configurations: 'aea/config.md'
      - Agent Communication:
        - Agent Communication Network: 'aea/acn.md'
      - Search & Discovery:
        - Defining Data Models: 'aea/defining-data-models.md'
        - The Query Language: 'aea/query-language.md'
        - SOEF Connection: 'aea/simple-oef-usage.md'
      - Developer Interfaces:
        - CLI:
          - Installation: 'aea/cli-how-to.md'
          - Commands: 'aea/cli-commands.md'
          - File structure: 'aea/package-imports.md'
          - Generating wealth: 'aea/wealth.md' 
        - GUI: 'aea/cli-gui.md'
      - Benchmarks:
        - Performance benchmark: 'aea/performance-benchmark.md'
      - API:
        - AbstractAgent: 'aea/api/abstract_agent.md'
        - AEA: 'aea/api/aea.md'
        - AEA Builder: 'aea/api/aea_builder.md'
        - Agent: 'aea/api/agent.md'
        - Agent Loop: 'aea/api/agent_loop.md'
        - Common: 'aea/api/common.md'
        - Exceptions: 'aea/api/exceptions.md'
        - Launcher: 'aea/api/launcher.md'
        - Manager: 'aea/api/manager.md'
        - Multiplexer: 'aea/api/multiplexer.md'
        - Runner: 'aea/api/runner.md'
        - Runtime: 'aea/api/runtime.md'
        - Components:
          - Base: 'aea/api/components/base.md'
          - Loader: 'aea/api/components/loader.md'
        - Configurations:
          - Base: 'aea/api/configurations/base.md'
          - Constants: 'aea/api/configurations/constants.md'
          - Loader: 'aea/api/configurations/loader.md'
          - Project: 'aea/api/configurations/project.md'
          - Pypi: 'aea/api/configurations/pypi.md'
        - Connections:
          - Base: 'aea/api/connections/base.md'
          - Stub Connection: 'aea/api/connections/stub/connection.md'
        - Context: 'aea/api/context/base.md'
        - Contracts:
          - Base: 'aea/api/contracts/base.md'
        - Crypto:
          - Base: 'aea/api/crypto/base.md'
          - Cosmos: 'aea/api/crypto/cosmos.md'
          - Ethereum: 'aea/api/crypto/ethereum.md'
          - Fetchai: 'aea/api/crypto/fetchai.md'
          - Helpers: 'aea/api/crypto/helpers.md'
          - LedgerApis: 'aea/api/crypto/ledger_apis.md'
          - Wallet: 'aea/api/crypto/wallet.md'
          - Registries:
            - Base: 'aea/api/crypto/registries/base.md'
        - Decision Maker:
          - Base: 'aea/api/decision_maker/base.md'
          - Default: 'aea/api/decision_maker/default.md'
        - Helpers:
          - Async Friendly Queue: 'aea/api/helpers/async_friendly_queue.md'
          - Async Utils: 'aea/api/helpers/async_utils.md'
          - Base: 'aea/api/helpers/base.md'
          - Dialogue:
            - Base: 'aea/api/helpers/dialogue/base.md'
          - Exception Policy: 'aea/api/helpers/exception_policy.md'
          - Exec Timeout: 'aea/api/helpers/exec_timeout.md'
          - File Lock: 'aea/api/helpers/file_lock.md'
          - IPFS:
            - Base: 'aea/api/helpers/ipfs/base.md'
          - Logging: 'aea/api/helpers/logging.md'
          - MultiAddress:
            - Base: 'aea/api/helpers/multiaddr/base.md'
          - MultipleExecutor: 'aea/api/helpers/multiple_executor.md'
          - Pipe: 'aea/api/helpers/pipe.md'
          - Preferences:
            - Base: 'aea/api/helpers/preference_representations/base.md'
          - Search:
            - Generic: 'aea/api/helpers/search/generic.md'
            - Models: 'aea/api/helpers/search/models.md'
          - Transaction:
            - Base: 'aea/api/helpers/transaction/base.md'
          - Win32: 'aea/api/helpers/win32.md'
          - YamlUtils: 'aea/api/helpers/yaml_utils.md'
        - Identity: 'aea/api/identity/base.md'
        - Mail: 'aea/api/mail/base.md'
        - Protocols:
          - Base: 'aea/api/protocols/base.md'
          - Generator:
            - Base: 'aea/api/protocols/generator/base.md'
            - Common: 'aea/api/protocols/generator/common.md'
            - Extract Specification: 'aea/api/protocols/generator/extract_specification.md'
            - Validate: 'aea/api/protocols/generator/validate.md'
          - Default Protocol:
            - Custom Types: 'aea/api/protocols/default/custom_types.md'
            - Dialogues: 'aea/api/protocols/default/dialogues.md'
            - Message: 'aea/api/protocols/default/message.md'
            - Serialization: 'aea/api/protocols/default/serialization.md'
          - Signing Protocol:
            - Custom Types: 'aea/api/protocols/signing/custom_types.md'
            - Dialogues: 'aea/api/protocols/signing/dialogues.md'
            - Message: 'aea/api/protocols/signing/message.md'
            - Serialization: 'aea/api/protocols/signing/serialization.md'
          - State Update Protocol:
            - Dialogues: 'aea/api/protocols/state_update/dialogues.md'
            - Message: 'aea/api/protocols/state_update/message.md'
            - Serialization: 'aea/api/protocols/state_update/serialization.md'
        - Registries:
          - Base: 'aea/api/registries/base.md'
          - Filter: 'aea/api/registries/filter.md'
          - Resources: 'aea/api/registries/resources.md'
        - Skills:
          - Base: 'aea/api/skills/base.md'
          - Error Skill: 'aea/api/skills/error/handlers.md'
          - Behaviors: 'aea/api/skills/behaviours.md'
          - Task: 'aea/api/skills/tasks.md'
        - Test Tools:
          - Generic: 'aea/api/test_tools/generic.md'
          - Test Cases: 'aea/api/test_tools/test_cases.md'
          - Test Skill: 'aea/api/test_tools/test_skill.md'
      - Glossary: 'aea/glossary.md'
      - Q&A: 'aea/questions-and-answers.md'
    - Simple OEF: 'aea/simple-oef.md'

  - Ledger:
    - Introduction: 'ledger/index.md'

    - Ledger v2:
      - Introduction: 'ledger_v2/index.md'
      - Commandline Client:
        - Introduction: 'ledger_v2/cli-introduction.md'
        - Keys: 'ledger_v2/cli-keys.md'
        - Tokens: 'ledger_v2/cli-tokens.md'
      - Block Explorer: 'ledger_v2/block-explorer.md'
      - Development: 'ledger_v2/building.md'
      - Networks: 'ledger_v2/networks.md'
      - Python Examples: 'ledger_v2/python-examples.md'

    - Ledger v1:
      - Introduction: 'ledger_v1/index.md'

      - Using the ledger:
        - Introduction: 'ledger_v1/walkthrough/index.md'
        - Creating addresses: 'ledger_v1/walkthrough/creating-addresses.md'
        - Getting testnet tokens: 'ledger_v1/walkthrough/testnet-tokens.md'
        - Making transfers: 'ledger_v1/walkthrough/transfers-and-balances.md'
        - Deploying smart contracts: 'ledger_v1/walkthrough/smart-contracts.md'

      - Smart Contracts:
        - Introduction: 'ledger_v1/smart-contracts/smart-contract-intro.md'
        - Static and dynamic contracts: 'ledger_v1/smart-contracts/static-dynamic.md'
        - Fetch.ai smart contracts:
          - 'Smart contracts in Etch': 'ledger_v1/smart-contracts/etch-smart-contracts.md'
          - 'Development environment': 'ledger_v1/smart-contracts/pipenv.md'
          - 'Executing smart contracts': 'ledger_v1/smart-contracts/executing-smart-contract-code.md'
        - Synergetic contracts:
          - 'Synergetic contracts': 'ledger_v1/smart-contracts/synergetic.md'
          - 'Executing synergetic contracts': 'ledger_v1/smart-contracts/executing-synergetic-code.md'
        - 'Memory': 'ledger_v1/smart-contracts/memory.md'
        - 'Fees': 'ledger_v1/smart-contracts/fees.md'

      - Machine Learning library:
        - Introduction: 'ledger_v1/machine-learning/index.md'
        - Architecture: 'ledger_v1/machine-learning/library-architecture.md'
        - Getting started: 'ledger_v1/machine-learning/getting-started.md'
        - AI in smart contracts: 'ledger_v1/machine-learning/smart-contract-example.md'
        - AI in synergetic contracts: 'ledger_v1/machine-learning/synergetic-contract-example.md'

      - Maths library: 'ledger_v1/maths-lib-overview.md'

      - Python API:
        - Installation: 'ledger_v1/python-ledger-api/python-api-install.md'
        - Examples : 
          - Block Number : "ledger_v1/python-ledger-api/examples/block-number.md"

      - Etch Language:
        - Introduction: 'ledger_v1/etch-language/index.md'
        - Usage:
            - 'Getting started': 'ledger_v1/etch-language/getstarted.md'
            - 'Debugging': 'ledger_v1/etch-language/debug.md'
            # - 'Release notes': 'ledger/etch-language/release-notes.md'
        - The Basics:
            - 'Syntax': 'ledger_v1/etch-language/syntax.md'
            - 'Variables': 'ledger_v1/etch-language/variables.md'
            - 'Operators': 'ledger_v1/etch-language/operators.md'
            - 'Logical operators': 'ledger_v1/etch-language/logic.md'
            - 'Control flow': 'ledger_v1/etch-language/control-flow.md'
            - 'Strings': 'ledger_v1/etch-language/strings.md'
            - 'Arrays': 'ledger_v1/etch-language/arrays.md'
            - 'Functions': 'ledger_v1/etch-language/functions.md'
            - Function Annotations:
              - 'Smart contract annotations': 'ledger_v1/etch-language/sc-annotations.md'
              - 'Synergetic contract annotations': 'ledger_v1/etch-language/syn-annotations.md'
            - 'Error checking': 'ledger_v1/etch-language/error-checking.md'
        - Fetch Ledger Types:
            - 'Persistent globals': 'ledger_v1/etch-language/persistent-globals.md'
            - 'State': 'ledger_v1/etch-language/states.md'
            - 'ShardedState': 'ledger_v1/etch-language/sharded-state.md'
            - 'Address': 'ledger_v1/etch-language/addresses.md'
            - 'Cryptographic functions': 'ledger_v1/etch-language/crypto.md'
            - 'Context': 'ledger_v1/etch-language/context.md'
            - 'Transaction': 'ledger_v1/etch-language/transaction.md'
            - 'Balance and Transfer': 'ledger_v1/etch-language/balance-transfer.md'
        - Mathematics:
            - 'Maths functions': 'ledger_v1/etch-language/maths-functions.md'
            - 'Tensor': 'ledger_v1/etch-language/tensor.md'
        - Machine Learning:
            - 'Model': 'ledger_v1/etch-language/model.md'
            - 'Graph': 'ledger_v1/etch-language/graph.md'
            - 'DataLoader': 'ledger_v1/etch-language/data-loaders.md'
            - 'Optimiser': 'ledger_v1/etch-language/optimiser.md'
            - 'Scaler': 'ledger_v1/etch-language/scaler.md'
        - Examples:
            - 'Fetch logo': 'ledger_v1/etch-language/examples/fetch-logo.md'
            - 'Mandelbrot': 'ledger_v1/etch-language/examples/mandelbrot.md'
            - 'Searching algorithms': 'ledger_v1/etch-language/examples/searching-algorithms.md'
            - 'Sorting algorithms': 'ledger_v1/etch-language/examples/sorting-algorithms.md'
            - 'Discrete Fourier Transformation': 'ledger_v1/etch-language/examples/dft.md'

      - Deploying nodes:
        - Building the code:
          - MacOS: 'ledger_v1/installation/installation-mac.md'
          - Ubuntu: 'ledger_v1/installation/installation-ubuntu.md'
          - Redhat: 'ledger_v1/installation/installation-redhat.md'
        - Running a node: 'ledger_v1/running-a-constellation.md'
        - Architecture: 'ledger_v1/architecture.md'

  - Incentivized Testnets:
    - Introduction: 'i_nets/index.md'
    - Agent World 1: 'i_nets/quickstart-aw1.md'
    - Agent World 2: 'i_nets/quickstart-aw2.md'
    - Agent World 3: 'i_nets/quickstart-aw3.md'

# Options
extra:
  logo: 'assets/images/favicon.ico'
 # disqus: 'fetch-ai-developer-documentation'


markdown_extensions:
  - admonition
  - codehilite:
      css_class: "highlight"

extra_css:
    - css/my-styles.css
    - css/default.css
    - css/dropdown-style.css

extra_javascript:
    - js/menu.js
    - https://unpkg.com/mermaid@7.1.2/dist/mermaid.min.js
