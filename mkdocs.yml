site_name: Fetch.ai Developer Documentation
site_url: https://docs.fetch.ai/
site_description: Everything you need to know about Fetch.ai. 
google_analytics: ['UA-150926604-1', 'mkdocs.org']
#repo_url: https://github.com/fetchai/docs // commented out to remove edit option
#repo_name: 'GitHub'
site_author: developer@fetch.ai

google_analytics: ['UA-118969813-3', 'auto']


theme:
  name: null
  logo:
    icon: 'assets/images/logo.png'
  custom_dir: theme/custom_theme
  favicon: '/assets/images/favicon.ico'
  feature:
    tabs: true  


nav:
  - Home : "/"


  - Agent Framework:
    - Introduction: 'aea/index.md'

    - Concepts:
      - Agent-oriented development: 'aea/agent-oriented-development.md'
      - Vision: 'aea/vision.md'
      - Application areas: 'aea/app-areas.md'
      - Relation to OEF and Ledger: 'aea/oef-ledger.md'
      - Identity: 'aea/identity.md'
      - Trust issues: 'aea/trust.md'

    - Demos:
      - Car park skills: 'aea/car-park-skills.md'
      - Generic skills: 'aea/generic-skills.md'
      - Gym example: 'aea/gym-example.md'
      - Gym skill: 'aea/gym-skill.md'
      - ML skills: 'aea/ml-skills.md'
      - TAC skills: 'aea/tac-skills.md'
      - TAC external app: 'aea/tac.md'
      - Thermometer skills: 'aea/thermometer-skills.md'
      - Weather skills: 'aea/weather-skills.md'

    - Development:
      - Getting started:
        - AEA quick start: 'aea/quickstart.md'
        - Ways to build an AEA: 'aea/steps.md'
        - AEA and web frameworks: 'aea/aea-vs-mvc.md'
        - Build an AEA with the CLI: 'aea/build-aea-step-by-step.md'
        - Build a skill for an AEA: 'aea/skill-guide.md'
        - Build an AEA programmatically: 'aea/build-aea-programmatically.md'
        - AEAs vs Agents: 'aea/agent-vs-aea.md'
        - CLI vs programmatic AEAs: 'aea/cli-vs-programmatic-aeas.md'
      - Step by step guides:
        - Thermometer skills step by step: 'aea/thermometer-skills-step-by-step.md'
      - Use case components:
        - Generic skills: 'aea/generic-skills.md'
        - ORM integration: 'aea/orm-integration-to-generic.md'
        - Frontend intergration: 'aea/connect-a-frontend.md'
        - HTTP Connection: 'aea/http-connection-and-skill.md'
      - Architecture:
        - Design principles: 'aea/design-principles.md'
        - Architectural diagram: 'aea/diagram.md'
        - Core components: 'aea/core-components.md'
        - File structure: 'aea/file-structure.md'
      - CLI:
         - CLI tool: 'aea/cli-how-to.md'
         - Commands: 'aea/cli-commands.md'
         - Package structure: 'aea/package-imports.md'
         - GUI: 'aea/cli-gui.md'
         - Generating wealth: 'aea/wealth.md'
      - Developer guides:
        - Version: 'aea/version.md'
        - Skill: 'aea/skill.md'
        - Protocol: 'aea/protocol.md'
        - Connection: 'aea/connection.md'
        - Scaffolding packages: 'aea/scaffolding.md'
        - Generating protocols: 'aea/generator.md'
        - Logging: 'aea/logging.md'
        - Build an AEA on a Raspberry Pi: 'aea/raspberry-set-up.md'
        - Using public ledgers: 'aea/integration.md'
        - Use multiplexer stand-alone: 'aea/multiplexer-standalone.md'
        - Create stand-alone transaction: 'aea/standalone-transaction.md'
        - Create decision-maker transaction: 'aea/decision-maker-transaction.md'
        - Deployment: 'aea/deployment.md'
      - Q&A: 'aea/questions-and-answers.md'


  - Ledger:
    - Introduction: 'ledger/index.md'

    - Using the ledger:
      - Introduction: 'ledger/walkthrough/index.md'
      - Creating addresses: 'ledger/walkthrough/creating-addresses.md'
      - Getting testnet tokens: 'ledger/walkthrough/testnet-tokens.md'
      - Making transfers: 'ledger/walkthrough/transfers-and-balances.md'
      - Deploying smart contracts: 'ledger/walkthrough/smart-contracts.md'

    - Smart Contracts:
      - Introduction: 'ledger/smart-contracts/smart-contract-intro.md'
      - Static and dynamic contracts: 'ledger/smart-contracts/static-dynamic.md'
      - Fetch.ai smart contracts:
        - 'Smart contracts in Etch': 'ledger/smart-contracts/etch-smart-contracts.md'
        - 'Development environment': 'ledger/smart-contracts/pipenv.md'
        - 'Executing smart contracts': 'ledger/smart-contracts/executing-smart-contract-code.md'
      - Synergetic contracts:
        - 'Synergetic contracts': 'ledger/smart-contracts/synergetic.md'
        - 'Executing synergetic contracts': 'ledger/smart-contracts/executing-synergetic-code.md'
      - 'Memory': 'ledger/smart-contracts/memory.md'
      - 'Fees': 'ledger/smart-contracts/fees.md'

    - Machine Learning library:
      - Introduction: 'ledger/machine-learning/index.md'
      - Architecture: 'ledger/machine-learning/library-architecture.md'
      - Getting started: 'ledger/machine-learning/getting-started.md'
      - AI in smart contracts: 'ledger/machine-learning/smart-contract-example.md'
      - AI in synergetic contracts: 'ledger/machine-learning/synergetic-contract-example.md'

    - Maths library: 'ledger/maths-lib-overview.md'

    - Python API:
      - Installation: 'ledger/python-ledger-api/python-api-install.md'
      - Examples : 
        - Block Number : "ledger/python-ledger-api/examples/block-number.md"

    - Etch Language:
      - Introduction: 'ledger/etch-language/index.md'
      - Usage:
          - 'Getting started': 'ledger/etch-language/getstarted.md'
          - 'Debugging': 'ledger/etch-language/debug.md'
          # - 'Release notes': 'ledger/etch-language/release-notes.md'
      - The Basics:
          - 'Syntax': 'ledger/etch-language/syntax.md'
          - 'Variables': 'ledger/etch-language/variables.md'
          - 'Operators': 'ledger/etch-language/operators.md'
          - 'Logical operators': 'ledger/etch-language/logic.md'
          - 'Control flow': 'ledger/etch-language/control-flow.md'
          - 'Strings': 'ledger/etch-language/strings.md'
          - 'Arrays': 'ledger/etch-language/arrays.md'
          - 'Functions': 'ledger/etch-language/functions.md'
          - Function Annotations:
            - 'Smart contract annotations': 'ledger/etch-language/sc-annotations.md'
            - 'Synergetic contract annotations': 'ledger/etch-language/syn-annotations.md'
          - 'Error checking': 'ledger/etch-language/error-checking.md'
      - Fetch Ledger Types:
          - 'Persistent globals': 'ledger/etch-language/persistent-globals.md'
          - 'State': 'ledger/etch-language/states.md'
          - 'ShardedState': 'ledger/etch-language/sharded-state.md'
          - 'Address': 'ledger/etch-language/addresses.md'
          - 'Cryptographic functions': 'ledger/etch-language/crypto.md'
          - 'Context': 'ledger/etch-language/context.md'
          - 'Transaction': 'ledger/etch-language/transaction.md'
          - 'Balance and Transfer': 'ledger/etch-language/balance-transfer.md'
      - Mathematics:
          - 'Maths functions': 'ledger/etch-language/maths-functions.md'
          - 'Tensor': 'ledger/etch-language/tensor.md'
      - Machine Learning:
          - 'Model': 'ledger/etch-language/model.md'
          - 'Graph': 'ledger/etch-language/graph.md'
          - 'DataLoader': 'ledger/etch-language/data-loaders.md'
          - 'Optimiser': 'ledger/etch-language/optimiser.md'
          - 'Scaler': 'ledger/etch-language/scaler.md'
      - Examples:
          - 'Fetch logo': 'ledger/etch-language/examples/fetch-logo.md'
          - 'Mandelbrot': 'ledger/etch-language/examples/mandelbrot.md'
          - 'Searching algorithms': 'ledger/etch-language/examples/searching-algorithms.md'
          - 'Sorting algorithms': 'ledger/etch-language/examples/sorting-algorithms.md'
          - 'Discrete Fourier Transformation': 'ledger/etch-language/examples/dft.md'

    - Deploying nodes:
      - Building the code:
        - MacOS: 'ledger/installation/installation-mac.md'
        - Ubuntu: 'ledger/installation/installation-ubuntu.md'
        - Redhat: 'ledger/installation/installation-redhat.md'
      - Running a node: 'ledger/running-a-constellation.md'
      - Architecture: 'ledger/architecture.md'


  # - Open Economic Framework:
  #   - Welcome:
  #     - "What is the OEF?": 'oef/index.md'
  #   - The Basics:
  #     - "Running a node" : 'oef/running-a-node.md'
  #     - "Get the SDK" : 'oef/sdk.md'
  #     - "Get a public key" : 'oef/public-key.md'
  #   - How It Works:
  #     - "Registering" : 'oef/registering.md'
  #     - "Advertising" : 'oef/advertising.md'
  #     - "Searching" : 'oef/searching.md'
  #     - "Negotiating" : 'oef/negotiating.md'
  #   - APIs: 
  #     - "Python" : 'oef/python-API.md'
  #     - "Java/Kotlin" : 'oef/java-kotlin-API.md'


  - Tutorials:
    - Index: 'tutorials/index.md'
    - "Create FET-1 contract": 'tutorials/fet1.md'

  # - Versions:
  #     -  "Last" : v1/

# Options
extra:
  logo: 'assets/images/favicon.ico'
 # disqus: 'fetch-ai-developer-documentation'


markdown_extensions:
  - pymdownx.superfences
  - admonition

extra_css:
    - css/my-styles.css

extra_javascript:
    - js/menu.js
    - https://unpkg.com/mermaid@7.1.2/dist/mermaid.min.js
